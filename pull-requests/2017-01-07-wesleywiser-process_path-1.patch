From 037c19afc05871f15e32e1113dc20860af3a68ad Mon Sep 17 00:00:00 2001
From: Conrad Kleinespel <conradk@conradk.com>
Date: Sat, 7 Jan 2017 23:24:42 +0100
Subject: [PATCH] adds bsd support

---
 Cargo.toml |  2 +-
 README.md  | 13 ++++++++-----
 src/bsd.rs | 51 +++++++++++++++++++++++++++++++++++++++++++++++++++
 src/lib.rs |  7 ++++++-
 4 files changed, 66 insertions(+), 7 deletions(-)
 create mode 100644 src/bsd.rs

diff --git a/Cargo.toml b/Cargo.toml
index ec29a64..31d58a6 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "process_path"
-version = "0.1.1"
+version = "0.1.2"
 authors = ["Wesley Wiser <wwiser@gmail.com>"]
 license = "MIT/Apache-2.0"
 repository = "https://github.com/wesleywiser/process_path"
diff --git a/README.md b/README.md
index b13256f..5aa83d4 100644
--- a/README.md
+++ b/README.md
@@ -31,11 +31,14 @@ This program prints its path to stdout:
 
 ## Supported Platforms
 
-Platform | Underlying API
--------- | --------------
-Linux    | `readlink(/proc/self/exe)`
-macOS    | `_NSGetExecutablePath()`
-Windows  | `GetModuleFileName()`
+Platform     | Underlying API
+------------ | ---------------------------------------------
+Linux        | `readlink(/proc/self/exe)`
+FreeBSD      | `sysctl(3)` or `readlink(/proc/curproc/file)`
+NetBSD       | `readlink(/proc/curproc/exe)`
+DragonflyBSD | `readlink(/proc/curproc/file)`
+macOS        | `_NSGetExecutablePath()`
+Windows      | `GetModuleFileName()`
 
 ## License
 
diff --git a/src/bsd.rs b/src/bsd.rs
new file mode 100644
index 0000000..6d23b72
--- /dev/null
+++ b/src/bsd.rs
@@ -0,0 +1,51 @@
+use std::fs::read_link;
+use std::path::PathBuf;
+use libc::*;
+use std::ptr;
+
+// http://stackoverflow.com/q/799679
+// http://stackoverflow.com/a/1024937
+
+#[cfg(target_os="netbsd")]
+pub fn get_executable_path() -> Option<PathBuf> {
+    read_link("/proc/curproc/exe").ok()
+}
+
+#[cfg(target_os="dragonfly")]
+pub fn get_executable_path() -> Option<PathBuf> {
+    read_link("/proc/curproc/file").ok()
+}
+
+#[cfg(target_os="freebsd")]
+pub fn get_executable_path() -> Option<PathBuf> {
+    let mib = [CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1];
+    let mut buf: Vec<u8> = Vec::with_capacity(1024);
+    let mut cb = 1024 as size_t;
+    let result = unsafe {
+        sysctl(mib.as_ptr(),
+               4,
+               buf.as_mut_ptr() as *mut c_void,
+               &mut cb as *mut size_t,
+               ptr::null(),
+               0)
+    };
+
+    // FreeBSD without procfs
+    if result == 0 {
+        // Convert the string allocated on the stack to a Rust string.
+        let len = unsafe { strlen(buf.as_ptr() as *const i8) };
+        unsafe { buf.set_len(len) };
+        match String::from_utf8(buf).ok() {
+            Some(path) => {
+                let mut pb = PathBuf::new();
+                pb.push(path);
+                Some(pb)
+            }
+            None => None,
+        }
+    } else {
+        // FreeBSD with procfs
+        read_link("/proc/curproc/file").ok()
+    }
+
+}
diff --git a/src/lib.rs b/src/lib.rs
index 91afce3..a12b90d 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -25,6 +25,11 @@ mod macos;
 #[cfg(target_os = "macos")]
 use macos as os;
 
+#[cfg(any(target_os="freebsd", target_os="dragonfly", target_os="netbsd"))]
+mod bsd;
+#[cfg(any(target_os="freebsd", target_os="dragonfly", target_os="netbsd"))]
+use bsd as os;
+
 #[cfg(windows)]
 mod windows;
 #[cfg(windows)]
@@ -32,7 +37,7 @@ use windows as os;
 
 
 /// Gets the path of the currently running process. If the path cannot be determined,
-/// `None` is returned. 
+/// `None` is returned.
 pub fn get_executable_path() -> Option<PathBuf> {
     os::get_executable_path()
 }
